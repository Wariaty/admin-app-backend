name: publish relese

on:
  workflow_dispatch:

jobs:
  publish-relese:

    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    timeout-minutes: 50
    permissions:
      contents: write

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"

    steps:
    
      - name: Configure git
        env:
          siemanko: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo -n ${{ secrets.SSH_KEY }} > ~/.ssh/id_ed25519
          echo -n ${{ secrets.SSH_PUB }} > ~/.ssh/id_ed25519.pub
          ssh-keyscan -t ed25519 host github.com > ~/.ssh/known_hosts
          sudo chmod 600 ~/.ssh/id_ed25519
          sudo chmod 600 ~/.ssh/id_ed25519.pub
          sudo chmod 644 ~/.ssh/known_hosts
          sudo chmod 755 ~/.ssh
          git config --global user.name 'HAL 9000'
          git config --global user.email '112089616+release-wariat@users.noreply.github.com'
          git clone git@github.com:Wariaty/admin-app-backend.git

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Test and package release
        run: |
          mvn -B -U -DremoveSnapshot validate
          mvn -B package
          artifact=$(echo '${project.name}-${project.version}' | mvn -N -q -DforceStdout help:evaluate)
          version=$(echo 'v${project.version}' | mvn -N -q -DforceStdout help:evaluate)
          echo "target/$artifact.jar" | xargs md5sum > "target/$artifact.md5"
          echo "jar_path=target/$artifact.jar" >> $GITHUB_ENV 
          echo "md5_path=target/$artifact.md5" >> $GITHUB_ENV 
          echo "release_version=$version" >> $GITHUB_ENV 

      - name: Create release branch & tag
        env:
          version: ${{ env.release_version }}
        run: |
          git add pom.xml
          git commit -m "Release: Update pom version to $version"
          git checkout -b "release_$version"
          git push origin "release_$version"
          echo "tag_target=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Prepare release notes
        run: |
          echo "# What's Changed:" > action-release-notes.txt
          echo "- Add release changelist here..." >> action-release-notes.txt
          echo "# Notes:" >> action-release-notes.txt
          echo "Source code attachments are left empty intentionally to avoid accidental leaks." >> action-release-notes.txt
          echo "Unfortunately, GitHub doesn't provide the possibility to remove them just yet." >> action-release-notes.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          artifact_name: ${{ env.artifact_name }}
        with:
          tag_name: ${{ env.release_version }}
          target_commitish: ${{ env.tag_target }}
          fail_on_unmatched_files: true
          body_path: action-release-notes.txt
          files: |
            ${{ env.jar_path }}
            ${{ env.md5_path }}

      - name: Prepare for upcoming development
        run: |
          git checkout main
          mvn clean
          mvn -B -DbumpMinor validate
          git add pom.xml
          git commit -m "Prepare next development version"
          git push origin main
