name: Publish relese

on:
  workflow_dispatch:
    branch:
        [ 'master' ]

jobs:
  publish-relese:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"

    steps:
      - name: Configure git config
        run: |
          git config --global user.name 'Release Bot'
          git config --global user.email 'release-bot@users.noreply.github.com'

      - name: Checkout branch
        uses: actions/checkout@v3

      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Test and package release
        run: |
          mvn -B -DremoveSnapshot validate
          mvn -B package
          echo 'release_version=v${project.version}' | mvn -N -q -DforceStdout help:evaluate >> $GITHUB_ENV

      - name: Create release branch & tag
        env:
          version: ${{ env.release_version }}
        run: |
          git add pom.xml
          git checkout -b "release_$version"
          git commit -m "Prepare release version $version"
          git push origin "release_$version"
          echo "tag_target=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Prepare release notes
        run: |
          echo "# What's Changed:" > release-notes.txt
          echo "- Add release changelist here..." >> release-notes.txt
          echo "# Note:" >> release-notes.txt
          echo "Source code attachments are left empty intentionally, to avoid accidental leaks." >> release-notes.txt
          echo "Unfortunately GitHub doesn't provide possibilty to remove them, just yet." >> release-notes.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.release_version }}
          target_commitish: ${{ env.tag_target }}
          files: target/*.jar
          fail_on_unmatched_files: true
          body_path: release-notes.txt

      - name: Prepare main for upcoming development
        run: |
          git checkout main
          mvn clean
          mvn -B -DbumpMinor validate
          mvn -B test
          git add pom.xml
          git commit -m "Prepare next development version"
          git push



